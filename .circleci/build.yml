version: 2.1

orbs:
  win: circleci/windows@5.0
  docker: circleci/docker@2.1

parameters:
  run-build:
    type: boolean
    default: false
  push-readme:
    type: boolean
    default: false
  master-branch:
    type: string
    default: "master"

jobs:
  build-linux-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    docker:
      - image: docker:20-git

    environment:
      ARCH: amd64
      BASH_ENV: /etc/profile

    shell: /bin/sh -leo pipefail

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run: &setup-tag-prefix
          name: Setup tag prefix
          command: |
            if [[ $CIRCLE_BRANCH != << pipeline.parameters.master-branch >> ]]; then
              echo "export TAG_PREFIX=${CIRCLE_SHA1:0:7}-" >> "$BASH_ENV"
            fi

      - run:
          name: Install jq
          command: apk add jq

      - run: &build-canonical-image
          name: Build image
          command: |
            tagfile="<< parameters.path >>/tags.json"

            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$TAG_PREFIX$c_tag-$ARCH"

            docker build "<< parameters.path >>" -t "$tag"

      - run: &verify-canonical-image
          name: Verify image matches specs
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            tag="$DOCKER_REPO:$TAG_PREFIX$c_tag-$ARCH"

            ocean_ver=$(jq -r .subtags.ocean "$tagfile")
            python_ver=$(jq -r .subtags.python "$tagfile")

            echo 'Ocean smoke test'
            docker run --rm "$tag" dwave --platform

            echo 'Verify Ocean version (console invariant way)'
            docker run --rm "$tag" python -c "import dwaveoceansdk; exit(dwaveoceansdk.__version__ != '$ocean_ver')"

            echo 'Verify Python version (console invariant way)'
            docker run --rm "$tag" python -c "import sys; exit('.'.join(map(str, sys.version_info[:2])) != '$python_ver')"

      - run: &login-dockerhub
          name: Login to DockerHub
          command: |
            echo "$DOCKER_ACCESS_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run: &push-canonical-image
          name: Push canonical image to DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")

            tag="$DOCKER_REPO:$TAG_PREFIX$c_tag-$ARCH"
            docker push "$tag"

  build-linux-arm64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    machine:
      image: default

    resource_class: arm.medium

    environment:
      ARCH: arm64

    steps:
      - checkout
      - run: *setup-tag-prefix
      - run: *build-canonical-image
      - run: *verify-canonical-image
      - run: *login-dockerhub
      - run: *push-canonical-image

  build-windows-amd64:
    parameters:
      path:
        type: string
        description: >
          Build context path.

    executor:
      name: win/server-2022
      shell: bash -eo pipefail

    environment:
      ARCH: amd64

    steps:
      - checkout
      - run: *setup-tag-prefix
      - run: *build-canonical-image
      - run: *verify-canonical-image
      - run: *login-dockerhub
      - run: *push-canonical-image

  create-multi-arch:
    parameters:
      path:
        type: string
        description: >
          Build context path.
      architectures:
        type: string
        description: >
          Whitespace-separated list of architectures (codes) to build.

    docker:
      # all we need is bash and docker
      - image: cimg/base:stable

    steps:
      - checkout
      - run: *setup-tag-prefix
      - run: *login-dockerhub
      - run:
          name: Create canonical multi-arch image manifests on DockerHub
          command: |
            tagfile="<< parameters.path >>/tags.json"
            c_tag=$(jq -r .canonical_tag "$tagfile")
            a_tags=$(jq -r ".alias_tags[]" "$tagfile")
            tag="$DOCKER_REPO:$TAG_PREFIX$c_tag"

            # expand manually (instead of using brace expansion) to support one-item lists
            tags=$(
              for arch in << parameters.architectures >>; do
                echo "$tag-$arch"
              done
            )

            # canonical (multi-arch) image
            docker manifest create "$tag" $tags
            docker manifest push "$tag"

            # aliases
            for a_tag in $a_tags; do
              docker buildx imagetools create -t "$DOCKER_REPO:$TAG_PREFIX$a_tag" "$tag"
            done

  create-shared-tags:
    parameters:
      path:
        type: string
        description: >
          Ocean dockerfiles base directory.

    docker:
      # all we need is bash and docker
      - image: cimg/base:stable

    steps:
      - checkout
      - run: *setup-tag-prefix
      - run: *login-dockerhub
      - run:
          name: Create manifest lists for shared tags
          command: |
            tagsfile="<< parameters.path >>/shared-tags.json"
            declare -A tags="($(jq -r '. | to_entries[] | @sh "[\(.key)]=\(.value | join(" "))"' <"$tagsfile"))"

            for tag in "${!tags[@]}"; do
              # tag ~ "5.3.0"
              s_tag="$DOCKER_REPO:$TAG_PREFIX$tag"

              # we know all canonical images pushed so far are multi-arch manifest lists,
              # and we can't create manifest lists out of manifest lists, so iterate over lists
              for c_tag in ${tags[$tag]}; do
                # c_tag ~ "5.3.0-python3.9-bullseye"
                m_tag="$DOCKER_REPO:$TAG_PREFIX$c_tag"
                digests=($(docker manifest inspect "$m_tag" | jq -r '.manifests[].digest'))

                for digest in "${digests[@]}"; do
                  docker manifest create "$s_tag" --amend "${DOCKER_REPO}@${digest}"
                done
              done

              docker manifest push "$s_tag"
            done

  push-readme:
    docker:
      - image: cimg/base:stable

    steps:
      - checkout

      - docker/update-description:
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_ACCESS_TOKEN
          image: $DOCKER_REPO

workflows:
  stage:
    when: << pipeline.parameters.run-build >>
    jobs:
      - build-linux-amd64: &build-linux-amd64
          name: linux-amd64-<< matrix.path >>
          matrix:
            parameters:
              # list manually for now; long-term, we want to auto-generate this list from the main runner
              path: &linux-dockerfiles [
                "dockerfiles/9/python3.9/bookworm",
                "dockerfiles/9/python3.9/slim-bookworm",
                "dockerfiles/9/python3.9/trixie",
                "dockerfiles/9/python3.9/slim-trixie",
                "dockerfiles/9/python3.10/bookworm",
                "dockerfiles/9/python3.10/slim-bookworm",
                "dockerfiles/9/python3.10/trixie",
                "dockerfiles/9/python3.10/slim-trixie",
                "dockerfiles/9/python3.11/bookworm",
                "dockerfiles/9/python3.11/slim-bookworm",
                "dockerfiles/9/python3.11/trixie",
                "dockerfiles/9/python3.11/slim-trixie",
                "dockerfiles/9/python3.12/bookworm",
                "dockerfiles/9/python3.12/slim-bookworm",
                "dockerfiles/9/python3.12/trixie",
                "dockerfiles/9/python3.12/slim-trixie",
                "dockerfiles/9/python3.13/bookworm",
                "dockerfiles/9/python3.13/slim-bookworm",
                "dockerfiles/9/python3.13/trixie",
                "dockerfiles/9/python3.13/slim-trixie",
              ]
          filters: &off-master
            branches:
              ignore: << pipeline.parameters.master-branch >>
          context: &ctx-staging "ocean-docker-staging"

      - build-linux-arm64: &build-linux-arm64
          name: linux-arm64-<< matrix.path >>
          matrix:
            parameters:
              path: *linux-dockerfiles
          filters: *off-master
          context: *ctx-staging

      - build-windows-amd64: &build-windows-amd64
          name: windows-amd64-<< matrix.path >>
          matrix:
            parameters:
              # list manually for now; long-term, we want to auto-generate this list from the main runner
              path: &windows-dockerfiles [
                "dockerfiles/9/python3.9/windowsservercore",
                "dockerfiles/9/python3.10/windowsservercore",
                "dockerfiles/9/python3.11/windowsservercore",
                "dockerfiles/9/python3.12/windowsservercore",
                "dockerfiles/9/python3.13/windowsservercore",
              ]
          filters: *off-master
          context: *ctx-staging

      - create-multi-arch: &create-linux-multi-arch
          name: create-linux-multi-arch-<< matrix.path >>
          requires:
            - linux-amd64-<< matrix.path >>
            - linux-arm64-<< matrix.path >>
          matrix:
            alias: create-linux-multi-arch
            parameters:
              path: *linux-dockerfiles
              architectures: ["amd64 arm64"]
          filters: *off-master
          context: *ctx-staging

      - create-multi-arch: &create-windows-multi-arch
          name: create-windows-multi-arch-<< matrix.path >>
          requires:
            - windows-amd64-<< matrix.path >>
          matrix:
            alias: create-windows-multi-arch
            parameters:
              path: *windows-dockerfiles
              architectures: ["amd64"]
          filters: *off-master
          context: *ctx-staging

      - create-shared-tags: &create-shared-tags
          name: create-shared-tags-<< matrix.path >>
          requires:
            - create-linux-multi-arch
            - create-windows-multi-arch
          matrix:
            alias: create-shared-tags
            parameters:
              path: &shared-tags ["dockerfiles/9"]
          filters: *off-master
          context: *ctx-staging

  deploy:
    when: << pipeline.parameters.run-build >>
    jobs:
      - build-linux-amd64:
          <<: *build-linux-amd64
          filters: &on-master
            branches:
              only: << pipeline.parameters.master-branch >>
          context: &ctx-prod "ocean-docker-prod"

      - build-linux-arm64:
          <<: *build-linux-arm64
          filters: *on-master
          context: *ctx-prod

      - build-windows-amd64:
          <<: *build-windows-amd64
          filters: *on-master
          context: *ctx-prod

      - create-multi-arch:
          <<: *create-linux-multi-arch
          filters: *on-master
          context: *ctx-prod

      - create-multi-arch:
          <<: *create-windows-multi-arch
          filters: *on-master
          context: *ctx-prod

      - create-shared-tags:
          <<: *create-shared-tags
          filters: *on-master
          context: *ctx-prod

  push-readme:
    when: << pipeline.parameters.push-readme >>
    jobs:
      - push-readme:
          name: update-readme-on-dockerhub
          filters: *on-master
          context: *ctx-prod
